// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	model "main/src/books/domain/model"
	error "main/utils/error"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// CreateBatchBooks provides a mock function with given fields: _a0
func (_m *BookRepository) CreateBatchBooks(_a0 []model.Book) *error.Error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatchBooks")
	}

	var r0 *error.Error
	if rf, ok := ret.Get(0).(func([]model.Book) *error.Error); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*error.Error)
		}
	}

	return r0
}

// CreateBook provides a mock function with given fields: _a0
func (_m *BookRepository) CreateBook(_a0 *model.Book) (*model.Book, *error.Error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 *model.Book
	var r1 *error.Error
	if rf, ok := ret.Get(0).(func(*model.Book) (*model.Book, *error.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Book) *model.Book); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Book) *error.Error); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.Error)
		}
	}

	return r0, r1
}

// DeleteBookByID provides a mock function with given fields: _a0
func (_m *BookRepository) DeleteBookByID(_a0 string) *error.Error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBookByID")
	}

	var r0 *error.Error
	if rf, ok := ret.Get(0).(func(string) *error.Error); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*error.Error)
		}
	}

	return r0
}

// GetAllBooks provides a mock function with given fields:
func (_m *BookRepository) GetAllBooks() ([]model.Book, *error.Error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 []model.Book
	var r1 *error.Error
	if rf, ok := ret.Get(0).(func() ([]model.Book, *error.Error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() *error.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.Error)
		}
	}

	return r0, r1
}

// GetBookByID provides a mock function with given fields: _a0
func (_m *BookRepository) GetBookByID(_a0 string) (*model.Book, *error.Error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 *model.Book
	var r1 *error.Error
	if rf, ok := ret.Get(0).(func(string) (*model.Book, *error.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Book); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *error.Error); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.Error)
		}
	}

	return r0, r1
}

// UpdateBookByID provides a mock function with given fields: _a0, _a1
func (_m *BookRepository) UpdateBookByID(_a0 string, _a1 *model.Book) (*model.Book, *error.Error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBookByID")
	}

	var r0 *model.Book
	var r1 *error.Error
	if rf, ok := ret.Get(0).(func(string, *model.Book) (*model.Book, *error.Error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Book) *model.Book); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.Book) *error.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error.Error)
		}
	}

	return r0, r1
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
